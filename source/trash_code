
       DRAW TETRAHEDRONS CODE



       // tetrahedron data
           /*
           unsigned int tVBOs[1000];
           unsigned int tVAOs[1000];
           unsigned int tEBOs[1000];
            */


        /*
        for(int i = 0; i < mesh.getFaces().size(); i++) {
            glm::vec3 t[4] = {mesh.getVertices()[mesh.getFaces()[i].x - 1],
                          mesh.getVertices()[mesh.getFaces()[i].y - 1],
                          mesh.getVertices()[mesh.getFaces()[i].z - 1],
                          {tetrahedron_vertex[0], tetrahedron_vertex[1], tetrahedron_vertex[2] }};
            tetrahedron tetrahedron = {t[0], t[1], t[2], t[3]};
            float volume = Mesh::tetrahedronVolume(tetrahedron);

            const float green[4] = {0.f, 1.f, 0.f, 1.f};
            const float red[4] = {1.f, 0.f, 0.f, 1.f};

            if(volume >= 0) glUniform4fv(glGetUniformLocation(tetra_shader.programID, "color"), 1, green);
            else glUniform4fv(glGetUniformLocation(tetra_shader.programID, "color"), 1, red);

            unsigned int f[12] = {0, 1, 2, 0, 1, 3, 1, 2, 3, 2, 0, 3};
            glBindVertexArray(tVAOs[i]);
            glBindBuffer(GL_ARRAY_BUFFER, tVBOs[i]);
            glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, tEBOs[i]);
            glBufferData(GL_ELEMENT_ARRAY_BUFFER, 12 * sizeof(int), f, GL_DYNAMIC_DRAW);
            glBufferData(GL_ARRAY_BUFFER, sizeof(glm::vec3) * 4, t, GL_DYNAMIC_DRAW);
            glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, sizeof(glm::vec3), nullptr);
            glEnableVertexAttribArray(0);
            glDrawElements(GL_TRIANGLES, 12, GL_UNSIGNED_INT, nullptr);
        }
         */



                 /* GLM::LOOK AT METHOD
                 glm::vec4 camTransform = glm::vec4(cam_position.x, cam_position.y, cam_position.z, 1.0f);
                 glm::vec3 v_up = glm::vec3{0.f, 1.f, 0.f};
                 camTransform = camRotationY * camRotationX * camTransform;
                 auto viewMatrix = glm::lookAt(
                         glm::vec3{camTransform.x, camTransform.y, camTransform.z},
                         glm::vec3{0.f, 0.f, 0.f},
                         v_up
                         );
                 */




glm::vec3 gravity::get_gravity_from_tetrahedrons(
        const std::vector<glm::vec3>& vertices,
        const std::vector<glm::vec<3, unsigned int>>& faces,
        const glm::vec3& p, const glm::vec3& tetrahedrons_vertex) {
    glm::vec3 gravity = {0.f, 0.f, 0.f};
    for(auto & face : faces) {
        tetrahedron t = {
                vertices[face.x - 1],
                vertices[face.y - 1],
                vertices[face.z - 1],
                tetrahedrons_vertex};
        float mass = util::tetrahedron_volume(t.b1, t.b2, t.b3, t.v);
        glm::vec3 barycentre = util::tetrahedron_barycentre(t.b1, t.b2, t.b3, t.v);
        float distance = glm::length(p - barycentre);
        gravity = gravity - ((p - barycentre)*mass) / (float)pow(distance, 3);
    }
    return gravity;
}

glm::vec3 gravity::get_gravity_from_tetrahedrons_corrected(
        const std::vector<glm::vec3>& vertices,
        const std::vector<glm::vec<3, unsigned int>>& faces,
        const glm::vec3& p, const glm::vec3& tetrahedrons_vertex) {
    glm::vec3 gravity = {0.f, 0.f, 0.f};
    for(auto & face : faces) {
        tetrahedron t = {
                vertices[face.x - 1],
                vertices[face.y - 1],
                vertices[face.z - 1],
                tetrahedrons_vertex};
        float mass = util::tetrahedron_volume(t.b1, t.b2, t.b3, t.v);
        glm::vec3 barycentre = util::tetrahedron_barycentre(t.b1, t.b2, t.b3, t.v);
        gravity = gravity + ((barycentre - p)*mass) / (float)pow(glm::length(barycentre - p), 3);
    }
    return gravity;
}


octree<gravity::cube>* gravity::get_discrete_space_as_octree(glm::vec3 min, glm::vec3 max, int resolution) {
    auto _cube = util::get_box(min, max);

    gravity::cube cube = {{_cube[0], _cube[1], _cube[2]}, _cube[3] / 2.0f };
    auto f = [](gravity::cube c)->std::array<gravity::cube, 8>{
        float new_extent = c.extent / 2.0f;
        glm::vec3 min = {c.center.x - new_extent, c.center.y - new_extent, c.center.z - new_extent};
        std::array<gravity::cube, 8> new_cubes{};
        new_cubes[0] = {{min.x, min.y, min.z}, new_extent};
        new_cubes[1] = {{min.x + c.extent, min.y, min.z}, new_extent};
        new_cubes[2] = {{min.x, min.y + c.extent, min.z}, new_extent};
        new_cubes[3] = {{min.x + c.extent, min.y + c.extent, min.z}, new_extent};
        new_cubes[4] = {{min.x, min.y, min.z + c.extent}, new_extent};
        new_cubes[5] = {{min.x + c.extent, min.y, min.z + c.extent}, new_extent};
        new_cubes[6] = {{min.x, min.y + c.extent, min.z + c.extent}, new_extent};
        new_cubes[7] = {{min.x + c.extent, min.y + c.extent, min.z + c.extent}, new_extent};
        return new_cubes;
    };
    auto condition = [](std::array<gravity::cube, 8>)->bool {
        return true;
    };
    auto root = new octree<gravity::cube>(cube);
    root->execute(resolution, cube, f, condition);
    return root;
}


/*
octree<gravity::gravity_cube>* gravity::get_gravity_octree_from_masses(
        glm::vec3 min, glm::vec3 max, int resolution, const std::vector<gravity::mass>& masses) {
    // get bounding box
    auto _cube = util::get_box(min, max);
    glm::vec3 center{_cube[0], _cube[1], _cube[2]};
    auto edge_length = _cube[3];
    min = center - (edge_length / 2.0f);

    // set octree root element
    gravity::gravity_cube gc = {{center, edge_length / 2.0f }, std::array<glm::vec3, 8>{}};
    gc.g[0] = gravity::get_gravity_from_masses(masses, 10.0, {min.x, min.y, min.z});
    gc.g[1] = gravity::get_gravity_from_masses(masses, 10.0, {min.x + edge_length, min.y, min.z});
    gc.g[2] = gravity::get_gravity_from_masses(masses, 10.0, {min.x, min.y + edge_length, min.z});
    gc.g[3] = gravity::get_gravity_from_masses(masses, 10.0, {min.x + edge_length, min.y + edge_length, min.z});
    gc.g[4] = gravity::get_gravity_from_masses(masses, 10.0, {min.x, min.y, min.z + edge_length});
    gc.g[5] = gravity::get_gravity_from_masses(masses, 10.0, {min.x + edge_length, min.y, min.z + edge_length});
    gc.g[6] = gravity::get_gravity_from_masses(masses, 10.0, {min.x, min.y + edge_length, min.z + edge_length});
    gc.g[7] = gravity::get_gravity_from_masses(masses, 10.0, {min.x + edge_length, min.y + edge_length, min.z + edge_length});

    // f function
    auto f = [masses](gravity::gravity_cube gc)->std::array<gravity::gravity_cube, 8> {
        float new_edge = gc.c.extent / 2.0f;
        glm::vec3 min = {gc.c.center.x - new_edge, gc.c.center.y - new_edge, gc.c.center.z - new_edge};
        std::array<gravity::cube, 8> new_cubes{};
        new_cubes[0] = {{min.x, min.y, min.z}, new_edge};
        new_cubes[1] = {{min.x + gc.c.extent, min.y, min.z}, new_edge};
        new_cubes[2] = {{min.x, min.y + gc.c.extent, min.z}, new_edge};
        new_cubes[3] = {{min.x + gc.c.extent, min.y + gc.c.extent, min.z}, new_edge};
        new_cubes[4] = {{min.x, min.y, min.z + gc.c.extent}, new_edge};
        new_cubes[5] = {{min.x + gc.c.extent, min.y, min.z + gc.c.extent}, new_edge};
        new_cubes[6] = {{min.x, min.y + gc.c.extent, min.z + gc.c.extent}, new_edge};
        new_cubes[7] = {{min.x + gc.c.extent, min.y + gc.c.extent, min.z + gc.c.extent}, new_edge};
        std::array<gravity::gravity_cube, 8> new_gravity_cubes{};
        for(int i = 0; i < 8; i++) {
            new_gravity_cubes[i].c = new_cubes[i];
            auto edge_length = new_gravity_cubes[i].c.extent;
            min = new_gravity_cubes[i].c.center - edge_length / 2.0f;
            new_gravity_cubes[i].g[0] = gravity::get_gravity_from_masses(masses, 10.0, {min.x, min.y, min.z});
            new_gravity_cubes[i].g[1] = gravity::get_gravity_from_masses(masses, 10.0, {min.x + edge_length, min.y, min.z});
            new_gravity_cubes[i].g[2] = gravity::get_gravity_from_masses(masses, 10.0, {min.x, min.y + edge_length, min.z});
            new_gravity_cubes[i].g[3] = gravity::get_gravity_from_masses(masses, 10.0, {min.x + edge_length, min.y + edge_length, min.z});
            new_gravity_cubes[i].g[4] = gravity::get_gravity_from_masses(masses, 10.0, {min.x, min.y, min.z + edge_length});
            new_gravity_cubes[i].g[5] = gravity::get_gravity_from_masses(masses, 10.0, {min.x + edge_length, min.y, min.z + edge_length});
            new_gravity_cubes[i].g[6] = gravity::get_gravity_from_masses(masses, 10.0, {min.x, min.y + edge_length, min.z + edge_length});
            new_gravity_cubes[i].g[7] = gravity::get_gravity_from_masses(masses, 10.0, {min.x + edge_length, min.y + edge_length, min.z + edge_length});
        }
        return new_gravity_cubes;
    };

    // condition
    auto condition = [](std::array<gravity::gravity_cube, 8>)->bool {
        return true;
    };

    // create octree and call execute to construct it
    auto root = new octree<gravity::gravity_cube>(gc);
    root->execute(resolution, gc, f, condition);
    return root;
}


std::vector<gravity::mass> gravity::get_masses_from_tube(tube t, int resolution, const std::vector<glm::vec3>& vertices) {
    auto cube_edge = util::xy_mesh_max_extent(vertices) / (float)resolution;
    auto cube_volume = (float)std::pow(cube_edge, 3);

    float units_per_tubef, new_cube_volume;
    int units_per_tube;

    // TUBE LENGTH / UNIT
    units_per_tubef = glm::length(t.t2 - t.t1) / cube_edge;
    // ROUNDED
    units_per_tube = (int) std::round((double) units_per_tubef);
    // NEW CUBE MASS
    new_cube_volume = (cube_volume * units_per_tubef) / (float) units_per_tube;

    // TUBE VERTEX OFFSET
    float tube_unit = glm::length(t.t2 - t.t1) / (float) units_per_tube;

    std::vector<gravity::mass> masses(units_per_tube);

    for (int n = 0; n < units_per_tube + 1; n++) {
        masses.push_back({t.t1 + glm::normalize(t.t2 - t.t1) * (float) n * tube_unit, new_cube_volume});
    }
    return masses;
}




void gravity::build_octree(
    float precision,
    std::vector<node>& octree,
    int id,
    int max_res,
    glm::vec3 min,
    float edge,
    const std::vector<glm::vec3>& gravity,
    const std::vector<glm::vec3>& space, int resolution
    ) {
    if(should_divide(precision, octree[id], min, edge, gravity, space, resolution) && max_res > 0) {
        // inspecting node became internal node -> it gets children, and first_child_id must be updated with first
        // child id; the children are all adjacent; then delete gravity_octant, since it is no longer needed
        octree[id].first_child_id = static_cast<int>(octree.size());
        delete octree[id].gravity_octant;
        octree[id].gravity_octant = nullptr;

        max_res--;
        auto min_box = util::get_box(min, edge/2.0f);
        for(int i = 0; i < 8; i++) {
            octree.push_back(build_node(min_box[i], edge/2.0f, gravity, space, resolution));
        }

        for(int i = 0; i < 8; i++) {
            build_octree(precision, octree, octree[id].first_child_id + i, max_res, min_box[i], edge/2.0f, gravity, space, resolution);
        }
    }
}

void gravity::build_octree_with_integral(
    float precision,
    std::vector<node>& octree,
    int id,
    int max_res,
    glm::vec3 min,
    float edge,
    const std::vector<tube>& tubes,
    float G, float R
    ) {
    if(should_divide_with_integral(precision, octree[id], min, edge, tubes, G, R) && max_res > 0) {
        // inspecting node became internal node -> it gets children, and first_child_id must be updated with first
        // child id; the children are all adjacent; then delete gravity_octant, since it is no longer needed
        octree[id].first_child_id = static_cast<int>(octree.size());
        delete octree[id].gravity_octant;
        octree[id].gravity_octant = nullptr;

        max_res--;
        auto min_box = util::get_box(min, edge/2.0f);
        for(int i = 0; i < 8; i++) {
            octree.push_back(build_node_with_integral(min_box[i], edge/2.0f, tubes, G, R));
        }

        for(int i = 0; i < 8; i++) {
            build_octree_with_integral(precision, octree, octree[id].first_child_id + i, max_res, min_box[i], edge/2.0f, tubes, G, R);
        }
    }
}


std::vector<gravity::mass> gravity::get_masses(
        const std::vector<glm::vec3>& vertices,
        const std::vector<glm::vec<3, unsigned int>>& faces,
        int resolution,
        float* sphere_R
        ) {
    omp_set_num_threads(omp_get_max_threads());
    std::vector<tube> tubes = {};
    std::vector<mass> volumes = {};

    Uint64 start = SDL_GetTicks64();

    // FIND XY PLANE
    glm::vec3 min = util::get_min(vertices);
    min.x += 0.0001; min.y += 0.0001;
    glm::vec3 max = util::get_max(vertices);

    max.x -= 0.0001; max.y -= 0.0001;
    min.z = min.z - 10;
    max.z = min.z;

    glm::vec3 center = (min + max) / 2.0f;

    float x_width = max.x - min.x;
    float y_width = max.y - min.y;
    float max_extent = x_width;
    if(y_width > max_extent) max_extent = y_width;

    min = {center.x - (max_extent / 2.0f), center.y - (max_extent / 2.0f), center.z};

    // CUBE EDGE LENGTH
    float cube_edge = max_extent / (float)resolution;

    // SET MASS SPHERE RADIUS
    *sphere_R = (float)std::cbrt(std::pow(cube_edge, 3) * (3.f / 4.f) / M_PI);

    auto cube_volume = (float)std::pow(cube_edge, 3);
    glm::vec3 ray_dir = {0.f, 0.f, 1.f};

#pragma omp parallel for default(none), shared(resolution, cube_edge, cube_volume, ray_dir, tubes, min, volumes, vertices, faces, sphere_R)
    for(int i = 0; i < resolution + 1; i++) {
        for(int j = 0; j < resolution + 1; j++) {
            // RAY
            glm::vec3 ray_origin{min.x + (float)i * cube_edge, min.y + (float)j * cube_edge, min.z};

            // FIND INTERSECTIONS
            std::vector<glm::vec3> intersections = util::ray_mesh_intersections_optimized(vertices, faces, ray_origin, ray_dir);
            if(intersections.size() == 3) intersections.erase(intersections.end() - 1);

            // FOR EACH INTERSECTIONS COUPLE
            for(int k = 0; k < intersections.size(); k += 2) {
                // TUBE
                tube t = {intersections[k], intersections[k + 1]};
                float units_per_tubef, new_cube_volume;
                int units_per_tube;
                // TUBE LENGTH / UNIT
                units_per_tubef = glm::length(t.t2 - t.t1) / cube_edge;
                // ROUNDED
                units_per_tube = (int) std::round((double) units_per_tubef);
                // NEW CUBE MASS
                new_cube_volume = (cube_volume * units_per_tubef) / (float) units_per_tube;

                if (units_per_tube == 0) continue;
                // TUBE VERTEX OFFSET
                float tube_unit = glm::length(t.t2 - t.t1) / (float) units_per_tube;
#pragma omp critical
                *sphere_R = std::min(*sphere_R, (float)std::cbrt(std::pow(tube_unit, 3) * (3.f / 4.f) / M_PI));
                for (int n = 0; n < units_per_tube + 1; n++) {
#pragma omp critical
                    volumes.push_back({t.t1 + glm::normalize(t.t2 - t.t1) * (float) n * tube_unit, new_cube_volume});
                }
            }
        }
    }
    std::cout << "get masses time elapsed " << (float)(SDL_GetTicks64() - start) / 1000.f << std::endl;
    return volumes;
}


glm::vec3 gravity::get_gravity_from_mass(gravity::mass m, float G, float sphere_R, glm::vec3 point) {
    glm::vec3 dir = m.p - point;
    auto r3 = (float)pow(glm::length(dir), 3);
    if(glm::length(dir) < sphere_R) {
        r3 = (float)std::pow(sphere_R, 3);
    }
    if (r3 > -std::numeric_limits<float>::epsilon() && r3 < std::numeric_limits<float>::epsilon()) {
        return {0.0, 0.0, 0.0};
    }
    return (dir * m.m * G) / r3;
}


glm::vec3 gravity::get_gravity_from_masses(const std::vector<gravity::mass>& masses, float G, float sphere_R, glm::vec3 point) {
    Uint64 start = SDL_GetTicks64();
    omp_set_num_threads(omp_get_max_threads());
    glm::vec3 thread_gravity[omp_get_max_threads()];
    for(int i = 0; i < omp_get_max_threads(); i++) {
        thread_gravity[i] = {0, 0, 0};
    }
#pragma omp parallel for default(none) shared(masses, point, G, thread_gravity, sphere_R)
    for(auto & mass : masses) {
        glm::vec3 dir = mass.p - point;
        auto r3 = (float)pow(glm::length(dir), 3);
        if(glm::length(dir) < sphere_R) {
#pragma omp critical
            r3 = (float)std::pow(sphere_R, 3);
        }
        if (r3 > -std::numeric_limits<float>::epsilon() && r3 < std::numeric_limits<float>::epsilon()) {
            continue;
        }
        thread_gravity[omp_get_thread_num()] = thread_gravity[omp_get_thread_num()] + (dir * mass.m * G) / r3;
    }
    glm::vec3 gravity{0, 0, 0};
    for(int i = 0; i < omp_get_max_threads(); i++) {
        gravity = gravity + thread_gravity[i];
    }
    std::cout << "gravity masses time elapsed: " << (float)(SDL_GetTicks64() - start) / 1000.f << std::endl;
    return gravity;
}



[[deprecated]] glm::vec3 gravity::get_gravity_from_tubes(const std::vector<glm::vec3>& vertices, int resolution, const std::vector<tube>& tubes, glm::vec3 point) {
    omp_set_num_threads(omp_get_max_threads());
    glm::vec3 thread_gravity[omp_get_max_threads()];
    for(int i = 0; i < omp_get_max_threads(); i++) {
        thread_gravity[i] = {0, 0, 0};
    }

    Uint64 start = SDL_GetTicks64();
    // FIND XY PLANE
    glm::vec3 min = util::get_min(vertices);
    min.x += 0.0001; min.y += 0.0001;
    glm::vec3 max = util::get_max(vertices);

    max.x -= 0.0001; max.y -= 0.0001;
    min.z = min.z - 10;
    max.z = min.z;

    float x_width = max.x - min.x;
    float y_width = max.y - min.y;
    float max_extent = x_width;
    if(y_width > max_extent) max_extent = y_width;

    // CUBE EDGE LENGTH
    float cube_edge = max_extent / (float)resolution;
    auto cube_volume = (float)pow(max_extent / (float)resolution, 3);
    float G = 10.0;

    glm::vec3 ray_dir = {0.f, 0.f, 1.f};
#pragma omp parallel default(none), shared(tubes, cube_edge, cube_volume, point, thread_gravity, G)
    {
        float units_per_tubef, tube_unit;
        float new_cube_volume, r3;
        int units_per_tube;
#pragma omp for
        for (auto &t: tubes) {
            // TUBE LENGTH / UNIT
            units_per_tubef = glm::length(t.t2 - t.t1) / cube_edge;
            // ROUNDED
            units_per_tube = (int) std::round((double) units_per_tubef);
            // NEW CUBE MASS
            new_cube_volume = (cube_volume * units_per_tubef) / (float)units_per_tube;

            if (units_per_tube == 0) continue;
            // TUBE VERTEX OFFSET
            tube_unit = glm::length(t.t2 - t.t1) / (float) units_per_tube;
            for (int n = 0; n < units_per_tube + 1; n++) {
                glm::vec3 mass = t.t1 + glm::normalize(t.t2 - t.t1) * (float) n * tube_unit;
                glm::vec3 dir = mass - point;
                r3 = (float)pow(glm::length(dir), 3);
                if (r3 > -std::numeric_limits<float>::epsilon() && r3 < std::numeric_limits<float>::epsilon()) {
                    continue;
                }
                thread_gravity[omp_get_thread_num()] =
                        thread_gravity[omp_get_thread_num()] + (dir * new_cube_volume * G) / r3;
            }
        }
    }
    glm::vec3 gravity = {0, 0, 0};
    for(int i = 0; i < omp_get_max_threads(); i++) {
        gravity = gravity + thread_gravity[i];
    }
    return gravity;
}





*/